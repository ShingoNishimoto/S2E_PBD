#include "PBD_Sat.h"
#include "Initialize.h"
#include "ClockGenerator.h"


PBD_Sat::PBD_Sat(SimulationConfig* sim_config, const GlobalEnvironment* glo_env, RelativeInformation* rel_info, PBD_InterSatComm* pbd_inter_sat_comm, const int sat_id)
:Spacecraft(sim_config, glo_env, rel_info, sat_id)//, gnss_observation_(PBD_GnssObservation(this->GetDynamics().GetOrbit(), glo_env->GetGnssSatellites()))
{
  Initialize(sim_config, glo_env, pbd_inter_sat_comm, sat_id);
  gnss_observation_ = new PBD_GnssObservation(this->GetDynamics().GetOrbit(), glo_env->GetGnssSatellites());
}

PBD_Sat::~PBD_Sat()
{
  delete components_;
}

// ここrel_info_必要ないのか？
void PBD_Sat::Initialize(SimulationConfig* sim_config, const GlobalEnvironment* glo_env, PBD_InterSatComm* pbd_inter_sat_comm, const int sat_id)
{
  components_ = new PBD_Components(dynamics_, structure_, local_env_, glo_env, rel_info_, pbd_inter_sat_comm, sim_config, &clock_gen_, sat_id);
}

void PBD_Sat::LogSetup(Logger & logger)
{
  Spacecraft::LogSetup(logger);
  components_->CompoLogSetUp(logger);
}

void PBD_Sat::Update(const SimTime* sim_time)
{
  // Update Components
  for (int i = 0; i < sim_time->GetStepSec() * 1000; i++)
  {
    clock_gen_.TickToComponents();
  }
  // Update Dynamics
  Spacecraft::Update(sim_time);
  // Add force and torque generated by components
  GenerateTorque_b();
  GenerateForce_b();

  // この更新を毎回すると計算は重そうだが，しょうがないか．
  gnss_observation_->Update();
}

void PBD_Sat::GenerateTorque_b()
{
  dynamics_->AddTorque_b(components_->GenerateTorque_b());
}

void PBD_Sat::GenerateForce_b()
{
  dynamics_->AddForce_b(components_->GenerateForce_b());
}
